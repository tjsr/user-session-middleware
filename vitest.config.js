// vitest.config.ts
import { defineConfig } from 'vitest/config';
import fs from 'fs';
import os from 'os';
import path from 'path';
const isWindows = os.platform() === 'win32';
const isBaseDirectory = (p) => {
    const parsedPath = path.parse(p);
    return parsedPath.root === parsedPath.dir;
};
const searchUpwardsForFile = (filename) => {
    let currentPath = __dirname;
    while ((!isWindows && currentPath !== '/') ||
        (isWindows && !isBaseDirectory(currentPath))) {
        const envFilePath = path.join(currentPath, filename);
        if (fs.existsSync(envFilePath)) {
            return currentPath;
        }
        currentPath = path.dirname(currentPath);
    }
    return '';
};
const searchUpwardsForEnvFile = () => {
    return searchUpwardsForFile('.env.test');
};
const findViteConfigPath = () => {
    return searchUpwardsForFile('vite.config.ts');
};
const findPackageJsonPath = () => {
    return searchUpwardsForFile('package.json');
};
const _projectPath = path.dirname(findPackageJsonPath());
const _setupFilesPath = findViteConfigPath() + './src/setup-tests.ts';
export default defineConfig({
    test: {
        coverage: {
            reporter: ['text', 'json', 'html'],
        },
        env: {
            DOTENV_FLOW_PATH: searchUpwardsForEnvFile(),
            DOTENV_FLOW_PATTERN: '.env.test',
        },
        globals: true,
        setupFiles: [path.resolve(__dirname, 'src/setup-tests.ts')],
        testTimeout: (process.env['VITEST_VSCODE'] !== undefined ? 120 : 3) * 1000,
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidml0ZXN0LmNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInZpdGVzdC5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsbUJBQW1CO0FBRW5CLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3BCLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQUNwQixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFFeEIsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLE9BQU8sQ0FBQztBQUU1QyxNQUFNLGVBQWUsR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFO0lBQ3BDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakMsT0FBTyxVQUFVLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxHQUFHLENBQUM7QUFDNUMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLFFBQWdCLEVBQVUsRUFBRTtJQUN4RCxJQUFJLFdBQVcsR0FBRyxTQUFTLENBQUM7SUFDNUIsT0FBTyxDQUFDLENBQUMsU0FBUyxJQUFJLFdBQVcsS0FBSyxHQUFHLENBQUM7UUFDeEMsQ0FBQyxTQUFTLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQy9DLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3JELElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO1lBQy9CLE9BQU8sV0FBVyxDQUFDO1FBQ3JCLENBQUM7UUFFRCxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDLENBQUM7QUFFRixNQUFNLHVCQUF1QixHQUFHLEdBQVcsRUFBRTtJQUMzQyxPQUFPLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzNDLENBQUMsQ0FBQztBQUdGLE1BQU0sa0JBQWtCLEdBQUcsR0FBVSxFQUFFO0lBQ3JDLE9BQU8sb0JBQW9CLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNoRCxDQUFDLENBQUM7QUFFRixNQUFNLG1CQUFtQixHQUFHLEdBQVUsRUFBRTtJQUN0QyxPQUFPLG9CQUFvQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzlDLENBQUMsQ0FBQztBQUVGLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO0FBQ3pELE1BQU0sZUFBZSxHQUFHLGtCQUFrQixFQUFFLEdBQUcsc0JBQXNCLENBQUM7QUFFdEUsZUFBZSxZQUFZLENBQUM7SUFDMUIsSUFBSSxFQUFFO1FBQ0osUUFBUSxFQUFFO1lBQ1IsUUFBUSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7U0FDbkM7UUFDRCxHQUFHLEVBQUU7WUFDSCxnQkFBZ0IsRUFBRSx1QkFBdUIsRUFBRTtZQUMzQyxtQkFBbUIsRUFBRSxXQUFXO1NBQ2pDO1FBQ0QsT0FBTyxFQUFFLElBQUk7UUFDYixVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQzNELFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUk7S0FDM0U7Q0FDRixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB2aXRlc3QuY29uZmlnLnRzXHJcblxyXG5pbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tICd2aXRlc3QvY29uZmlnJztcclxuaW1wb3J0IGZzIGZyb20gJ2ZzJztcclxuaW1wb3J0IG9zIGZyb20gJ29zJztcclxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XHJcblxyXG5jb25zdCBpc1dpbmRvd3MgPSBvcy5wbGF0Zm9ybSgpID09PSAnd2luMzInO1xyXG5cclxuY29uc3QgaXNCYXNlRGlyZWN0b3J5ID0gKHA6IHN0cmluZykgPT4ge1xyXG4gIGNvbnN0IHBhcnNlZFBhdGggPSBwYXRoLnBhcnNlKHApO1xyXG4gIHJldHVybiBwYXJzZWRQYXRoLnJvb3QgPT09IHBhcnNlZFBhdGguZGlyO1xyXG59O1xyXG5cclxuY29uc3Qgc2VhcmNoVXB3YXJkc0ZvckZpbGUgPSAoZmlsZW5hbWU6IHN0cmluZyk6IHN0cmluZyA9PiB7XHJcbiAgbGV0IGN1cnJlbnRQYXRoID0gX19kaXJuYW1lO1xyXG4gIHdoaWxlICgoIWlzV2luZG93cyAmJiBjdXJyZW50UGF0aCAhPT0gJy8nKSB8fFxyXG4gICAgKGlzV2luZG93cyAmJiAhaXNCYXNlRGlyZWN0b3J5KGN1cnJlbnRQYXRoKSkpIHtcclxuICAgIGNvbnN0IGVudkZpbGVQYXRoID0gcGF0aC5qb2luKGN1cnJlbnRQYXRoLCBmaWxlbmFtZSk7XHJcbiAgICBpZiAoZnMuZXhpc3RzU3luYyhlbnZGaWxlUGF0aCkpIHtcclxuICAgICAgcmV0dXJuIGN1cnJlbnRQYXRoO1xyXG4gICAgfVxyXG5cclxuICAgIGN1cnJlbnRQYXRoID0gcGF0aC5kaXJuYW1lKGN1cnJlbnRQYXRoKTtcclxuICB9XHJcbiAgcmV0dXJuICcnO1xyXG59O1xyXG5cclxuY29uc3Qgc2VhcmNoVXB3YXJkc0ZvckVudkZpbGUgPSAoKTogc3RyaW5nID0+IHtcclxuICByZXR1cm4gc2VhcmNoVXB3YXJkc0ZvckZpbGUoJy5lbnYudGVzdCcpO1xyXG59O1xyXG5cclxuXHJcbmNvbnN0IGZpbmRWaXRlQ29uZmlnUGF0aCA9ICgpOnN0cmluZyA9PiB7XHJcbiAgcmV0dXJuIHNlYXJjaFVwd2FyZHNGb3JGaWxlKCd2aXRlLmNvbmZpZy50cycpO1xyXG59O1xyXG5cclxuY29uc3QgZmluZFBhY2thZ2VKc29uUGF0aCA9ICgpOnN0cmluZyA9PiB7XHJcbiAgcmV0dXJuIHNlYXJjaFVwd2FyZHNGb3JGaWxlKCdwYWNrYWdlLmpzb24nKTtcclxufTtcclxuXHJcbmNvbnN0IF9wcm9qZWN0UGF0aCA9IHBhdGguZGlybmFtZShmaW5kUGFja2FnZUpzb25QYXRoKCkpO1xyXG5jb25zdCBfc2V0dXBGaWxlc1BhdGggPSBmaW5kVml0ZUNvbmZpZ1BhdGgoKSArICcuL3NyYy9zZXR1cC10ZXN0cy50cyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xyXG4gIHRlc3Q6IHtcclxuICAgIGNvdmVyYWdlOiB7XHJcbiAgICAgIHJlcG9ydGVyOiBbJ3RleHQnLCAnanNvbicsICdodG1sJ10sXHJcbiAgICB9LFxyXG4gICAgZW52OiB7XHJcbiAgICAgIERPVEVOVl9GTE9XX1BBVEg6IHNlYXJjaFVwd2FyZHNGb3JFbnZGaWxlKCksXHJcbiAgICAgIERPVEVOVl9GTE9XX1BBVFRFUk46ICcuZW52LnRlc3QnLFxyXG4gICAgfSxcclxuICAgIGdsb2JhbHM6IHRydWUsXHJcbiAgICBzZXR1cEZpbGVzOiBbcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ3NyYy9zZXR1cC10ZXN0cy50cycpXSxcclxuICAgIHRlc3RUaW1lb3V0OiAocHJvY2Vzcy5lbnZbJ1ZJVEVTVF9WU0NPREUnXSAhPT0gdW5kZWZpbmVkID8gMTIwIDogMykgKiAxMDAwLFxyXG4gIH0sXHJcbn0pO1xyXG4iXX0=